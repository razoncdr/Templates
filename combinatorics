// Combinatorics: factorial, modular multiplicative inverse, ncr, derangement, catalan numbers

const ll mxN = 2e6+5, MOD = 1e9+7;

ll fact[mxN+5], inv_of_fact[mxN + 5], d[1003][1003];

ll binpow(ll a, ll b)
{
    a %= MOD;
    ll res = 1LL;
    while (b > 0)
    {
        if (b & 1) res = (res * a) % MOD;
        a = (a * a) % MOD;
        b >>= 1;
    }
    re res;
}

void pre() |call pre() in main function 
{
    ll i, j, ans = 1;
    // factorial with modulo
    fact[0] = 1;
    for(i=1;i<=mxN;i++)
    {
        fact[i] = fact[i-1] * i;
        fact[i] %= MOD;
    }

    // Modular Multiplicative inverse of factorial[i]
    inv_of_fact[mxN] = binpow(fact[mxN], MOD - 2);
    for(i=mxN-1;i>=0;i--)
    {
        inv_of_fact[i] = inv_of_fact[i+1] * (i+1);
        inv_of_fact[i] %= MOD;
    }

    // Derangement: how j numbers can be arrange in i positions such
    //              that no one is in it's position (index != value)
    for(i=0;i<=1000;i++)
    {
        d[0][i] = 1;
        d[1][i] = i - 1;
        d[2][i] = (i - 1) + (i - 2) * (i - 2);
        d[i][0] = 1;
    }
    for(i=3;i<=1000;i++)
    {
        for(j=1;j<=1000;j++)
        {
            d[i][j] = (i - 1)*d[i-2][j-2] + (j-1)*(d[i-1][j-1]);
            d[i][j] %= MOD;
        }
    }
}

ll ncr(ll n, ll r)
{
    if(r>n) re 0;
    if(n==r | r==0) re 1;
    re ((fact[n] * ((inv_of_fact[r]*inv_of_fact[n-r])%MOD))%MOD);
}

ll catalan(ll n)
{
    ll ans = ncr(n+n, n) * binpow(n+1, MOD - 2); // here inverse is not inv_of_fact
    ans %= MOD;
    re ans;
}
void solve()
{
    ll n=0, q=0, i=0, j=0, k=0, m=0, x=0, ans=0;
    cn n;
    cout<<(catalan(n+1)*(n+2) - 1 + MOD)%MOD;
}
