int modInverse(int A, int M)
{
    int m0 = M;
    int y = 0, x = 1;
    if (M == 1) return 0;
    while (A > 1) {
        int q = A / M;
        int t = M;
        M = A % M, A = t,t = y,y = x - q * y,x = t;
    }
    if (x < 0) x += m0;
    return x;
}
void init(){
    fact[0] = fact[1] = 1;
    for(ll i=2;i<N;i++)
        fact[i] = (fact[i-1] * i) % mod;
}
// O(log(mod))
ll nCr(int n,int r){
    if(r>n) return 0;
    return fact[n] * modInverse(fact[r] * fact[n - r] %mod ,mod) % mod;
}
// O(log(mod))
ll catalan(int n){
    /* factorial 2*n is needed*/
    return fact[2*n] * modInverse(fact[n+1] * fact[n] %mod ,mod) % mod;
}
void add(int &a, int b) {
  a = ((a%mod)+(b%mod))%mod;
}
void mul(int &a, int b) {
  a = ((a%mod) * (b%mod)) % mod;
}
void divide(int &a,int b){
  mul(a,modInverse(b,mod));
}
void substract(int &a,int b){
  a = (a-b+mod)%mod;
}
