// Topological Sort Using DFS and PathVisited 
// Finds Cycle in Directed Graph

#include<bits/stdc++.h>
#define ll long long
#define int long long
#define nl '\n'
#define yes cout<<"YES"
#define no cout<<"NO"
#define fi first
#define se second
#define bgn begin()
#define end end()
#define one cout<<"1"
#define mone cout<<"-1"
#define zero cout<<"0"
#define fori for(i=0;i<n;i++)
#define fori1 for(i=1;i<=n;i++)
#define forj for(j=0;j<n;j++)
#define fork for(k=0;k<n;k++)
#define forilen for(i=0;i<len;i++)
#define forim for(i=0;i<m;i++)
#define forjm for(j=0;j<m;j++)
#define forkm for(k=0;k<m;k++)
#define cn cin>>
#define lmx LLONG_MAX
#define lmn LLONG_MIN
#define imx INT_MAX
#define imn INT_MIN
#define re return
#define pb push_back
#define vl vector<ll>
#define pll pair<ll,ll>
#define vpll vector<pll>
using namespace std;
//typedef vector<int> vi;


const ll MAXN = 3e5;
vector <ll> adj[MAXN + 5];
bool vis[MAXN + 5], pathVis[MAXN + 5], cycle;
ll par[MAXN + 5], depth[MAXN + 5];
stack <ll> stk;

void add(ll a, ll b)
{
    adj[a].pb(b);
//    adj[b].pb(a);
}

void dfs(ll st, ll p)
{
    if(cycle) re;
    vis[st] = true;
    pathVis[st] = true;
    for(auto it: adj[st])
    {
        if(pathVis[it])
        {
            cycle = true;
            re;
        }
        if(!vis[it])
        {
            dfs(it, st);
        }
    }
    pathVis[st] = false;
    stk.push(st);
}

void solve()
{
    ll n=0, q=0, i=0, j=0, k=0, m=0, x=0, ans=0;
    cn n>>m;
    forim
    {
        cn k>>x;
        add(k, x);
    }
    for(i=1;i<=n;i++)
    {
        if(!vis[i])
        {
            dfs(i, 0);
        }
    }
    if(cycle)
    {
        cout<<"IMPOSSIBLE";
        re;
    }
    while(!stk.empty())
    {
        cout<<stk.top()<<' ';
        stk.pop();
    }
}

int32_t main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    solve();
}


//CSES Course Schedule 
